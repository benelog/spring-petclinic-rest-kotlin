/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.springframework.samples.petclinic.rest.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import jakarta.validation.Valid
import jakarta.validation.constraints.Min
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.samples.petclinic.rest.dto.RestErrorDto
import org.springframework.samples.petclinic.rest.dto.SpecialtyDto
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@Validated
@RequestMapping("\${api.base-path:/petclinic/api}")
interface SpecialtiesApi {

    @Operation(
        summary = "Create a specialty",
        operationId = "addSpecialty",
        description = """Creates a specialty .""",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "Specialty created successfully.",
                content = [Content(schema = Schema(implementation = SpecialtyDto::class))]
            ),
            ApiResponse(responseCode = "304", description = "Not modified."),
            ApiResponse(
                responseCode = "400",
                description = "Bad request.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            ),
            ApiResponse(
                responseCode = "404",
                description = "Specialty not found.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            ),
            ApiResponse(
                responseCode = "500",
                description = "Server error.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/specialties"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun addSpecialty(
        @Parameter(
            description = "The specialty",
            required = true
        ) @Valid @RequestBody specialtyDto: SpecialtyDto
    ): ResponseEntity<SpecialtyDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Delete a specialty by ID",
        operationId = "deleteSpecialty",
        description = """Returns the specialty or a 404 error.""",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "Specialty details found and returned.",
                content = [Content(schema = Schema(implementation = SpecialtyDto::class))]
            ),
            ApiResponse(responseCode = "304", description = "Not modified."),
            ApiResponse(
                responseCode = "400",
                description = "Bad request.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            ),
            ApiResponse(
                responseCode = "404",
                description = "Specialty not found.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            ),
            ApiResponse(
                responseCode = "500",
                description = "Server error.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/specialties/{specialtyId}"],
        produces = ["application/json"]
    )
    fun deleteSpecialty(
        @Min(0) @Parameter(
            description = "The ID of the specialty.",
            required = true
        ) @PathVariable("specialtyId") specialtyId: Int
    ): ResponseEntity<SpecialtyDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Get a specialty by ID",
        operationId = "getSpecialty",
        description = """Returns the specialty or a 404 error.""",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "Specialty details found and returned.",
                content = [Content(schema = Schema(implementation = SpecialtyDto::class))]
            ),
            ApiResponse(responseCode = "304", description = "Not modified."),
            ApiResponse(
                responseCode = "400",
                description = "Bad request.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            ),
            ApiResponse(
                responseCode = "404",
                description = "Specialty not found.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            ),
            ApiResponse(
                responseCode = "500",
                description = "Server error.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/specialties/{specialtyId}"],
        produces = ["application/json"]
    )
    fun getSpecialty(
        @Min(0) @Parameter(
            description = "The ID of the speciality.",
            required = true
        ) @PathVariable("specialtyId") specialtyId: Int
    ): ResponseEntity<SpecialtyDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Lists specialties",
        operationId = "listSpecialties",
        description = """Returns an array of specialty .""",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "Specialties found and returned.",
                content = [Content(schema = Schema(implementation = SpecialtyDto::class))]
            ),
            ApiResponse(responseCode = "304", description = "Not modified."),
            ApiResponse(
                responseCode = "500",
                description = "Server error.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/specialties"],
        produces = ["application/json"]
    )
    fun listSpecialties(): ResponseEntity<List<SpecialtyDto>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Update a specialty by ID",
        operationId = "updateSpecialty",
        description = """Returns the specialty or a 404 error.""",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "Specialty details found and returned.",
                content = [Content(schema = Schema(implementation = SpecialtyDto::class))]
            ),
            ApiResponse(responseCode = "304", description = "Not modified."),
            ApiResponse(
                responseCode = "400",
                description = "Bad request.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            ),
            ApiResponse(
                responseCode = "404",
                description = "Specialty not found.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            ),
            ApiResponse(
                responseCode = "500",
                description = "Server error.",
                content = [Content(schema = Schema(implementation = RestErrorDto::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.PUT],
        value = ["/specialties/{specialtyId}"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun updateSpecialty(
        @Min(0) @Parameter(
            description = "The ID of the specialty.",
            required = true
        ) @PathVariable("specialtyId") specialtyId: Int,
        @Parameter(
            description = "The pet",
            required = true
        ) @Valid @RequestBody specialtyDto: SpecialtyDto
    ): ResponseEntity<SpecialtyDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
